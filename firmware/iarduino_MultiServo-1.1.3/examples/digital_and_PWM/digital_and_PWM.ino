//  Раскомментируйте для программной реализации шины I2C:   //
//  #define pin_SW_SDA 3                                    // Назначение любого вывода Arduino для работы в качестве линии SDA программной шины I2C.
//  #define pin_SW_SCL 9                                    // Назначение любого вывода Arduino для работы в качестве линии SCL программной шины I2C.
//  Раскомментируйте для совместимости с большинством плат: //
//  #include <Wire.h>                                       // Библиотека iarduino_MultiServo будет использовать методы и функции библиотеки Wire.
//  Ссылки для ознакомления:                                //
//  Подробная информация о подключении модуля к шине I2C:   // http://wiki.iarduino.ru/page/i2c_connection/
//  Подробная информация о функциях и методах библиотеки:   // http://wiki.iarduino.ru/page/multi-servo-shield-na-16-servoprivodov/
                                                            //
#include <iarduino_MultiServo.h>                            // Подключаем библиотеку iarduino_MultiServo
iarduino_MultiServo MSS;                                    // Объявляем объект MSS, для работы с библиотекой
                                                            //
void setup(){                                               //
   MSS.begin(0x40, 1000);                                   // Инициируем работу с MultiServoShield
                                                            // указывая адрес MultiServoShield на шине I2C: 0x40 (по умолчанию 0x40)
                                                            // и частоту сигнала ШИМ: 1000 Гц (по умолчанию 50 Гц), можно указать от 1 до 1526 Гц
}                                                           //
                                                            //
void loop(){                                                //
   MSS.digitalWrite(5, LOW);                                // Устанавливаем на 5 выводе     низкий  уровень (уровень логического «0»)
   MSS.digitalWrite(6, HIGH);                               // Устанавливаем на 6 выводе     высокий уровень (уровень логической  «1»)
   MSS.digitalWrite(SERVO_ALL, LOW);                        // Устанавливаем на всех выводах низкий  уровень (уровень логического «0»)
   MSS.digitalWrite(SERVO_ALL, HIGH);                       // Устанавливаем на всех выводах высокий уровень (уровень логической  «1»)
   MSS.analogWrite(0, 1023);                                // Устанавливаем на 0 выводе     сигнал ШИМ с коэффициентом заполнения 1023 (25%), допускаются значения от 0 до 4095
   MSS.analogWrite(1, 2047);                                // Устанавливаем на 1 выводе     сигнал ШИМ с коэффициентом заполнения 2047 (50%), допускаются значения от 0 до 4095
   MSS.analogWrite(SERVO_ALL, 3071);                        // Устанавливаем на всех выводах сигнал ШИМ с коэффициентом заполнения 3071 (75%), допускаются значения от 0 до 4095
   MSS.analogWrite(10, 4095);                               // Устанавливаем на 10 выводе    сигнал ШИМ с коэффициентом заполнения 4095 (100%), допускаются значения от 0 до 4095
   MSS.analogWrite(2, 2047, 1023);                          // Устанавливаем на 2 выводе     сигнал ШИМ с коэффициентом заполнения 2047 (50%), допускаются значения от 0 до 4095
                                                            // и фазовым сдвигом 1023 (25%), допускаются значения от 0 до 4095.
                                                            // Фазовый сдвиг - необязательный параметр указывается от 0 до 4095 (по умолчанию 0)
                                                            // устанавливает задержку сигнала ШИМ по отношению к другим выводам, но не влияет на коэффициент заполнения
   MSS.analogRead(5);                                       // Читаем ранее установленный коэффициент заполнения ШИМ на выводе 5
                                                            // если на выводе был установлен низкий  уровень (LOW),  то функция вернёт 0
                                                            // если на выводе был установлен высокий уровень (HIGH), то функция вернёт 4096
                                                            // в нашем случае, функция вернёт 3071