
global_planer/maximum_cost: 8 #Most important
local_planer/cost_threshhold: 37 #100 are walls, then there is inflation (Represents median of cost of points)
local_planer/max_cost_increase: 2.3 # x times
local_planer/timeout_on_fail: 1 #secs
#speed coeffs
local_planer/full_path_coeff_dist: 50 #dist from target in cells at which robot goes full spd (the lower the faster)
local_planer/static_coeff:  1
local_planer/min_coeff: 0.3 #Final!!
local_planer/min_path_coeff: 0.6
local_planer/path_speed_coeff: 1.3 #More = faster. В тугриках. Robot slows down at start and finish of the route
local_planer/cost_speed_coeff: 1.15 # More = slower
local_planer/max_cost_speed_coeff: 3.5 #more = more slowing 
##################
global_planer: #almost everything is in cells, which depends on costmap resolution
  absolute_max_cost: 75
  maximum_jumps: 1300
  fail_count_threshhold: 600 # Should be a big number (max fails mid-way) | These two share same fail counter
  num_of_tries_for_last: 4  # Times planer can fail by max jumps         | ^
  update_rate: 12
  step: 4
  sleep_on_fail_time: 0.5
  update_stop_thresh: 3 # Dist from target IN STEPS, when stops updating route
  # (DIVIDED BY UPDATE RATE)
  recovery_cost_step: 130 #if stuck in begining increases allowed cost 
  #
  # Features
  cleanup_feature: 1 #works well if you dont have to go closer to start point during route
  resend: 1
  stuck_check_feature: 1
  experimental_cleanup_enable: 1
  twist_amplify_coeff: 0.1
  consecutive_jumps_threshhold: 0 #Leave a target each 'n' straight hops
  step_radians_resolution: 12
  #!!! DANGEROUS
  accelerate_coeff: 0.00015 #works only when experimental cleanup is switched off, which is not adviced
  #!!!
  ##### dir locking
  stuck_check_jumps: 5 #checks for 'stuck' per 'n' jumps
  lock_dirs: #directions which get tried one after another if planer is stuck
    - 0 # first should be always zero
    - left
    - top
    - left
    - top
    - right
    - bot
    - right
    - bot
    
#### Cleanup
  cleanup_power: 2       # number of cleanups, ussualy one is enough
  #################################
  cleanup_repeats_len: 5        # These two are important. Enabled by experimental cleanup.
  ################################# point by (cl_rep_threshhold) cells -> All intermediate removed
  # MULTIPLIED BY STEP: (ALL SHOULD BE LESS THAN 1)
  cleanup_repeats_threshhold: 0.85   # If planer hasnt moved in (cl_repeats_len) jumps from each
  stuck_dist_threshhold: 0.3 #dist which should be reached in (stuck_check_jumps)
  dead_end_dist_diff_threshhold: 0.95 #if doesnt grow quick enough (this_thresh*step), the point is removed (considered a sharp turn)
  # Step is added:
  dist_to_target_threshhold: 1  # in cells, when to draw straight line = step + n
##################################
local_planer:
  ##############
  #Topics:
  disable_adjust_sec_topic: disable_adjust_sec
  ###############
  
  skip_thresh: 3 #max points to skip if fails by cost
  threshhold: 1.8 #in cells, how close to target should robot ride
  twist_amplify_coeff: 1.4 #depends on resolution, allows to skip points behind
  inertia_compensation_coeff: 0.01 #allows for shrap turns (in theory)
  # Important
  disable_adjust_sec_time: 3
  
  safe_footprint_radius: 0.18
  update_rate: 14 # in Hz
  rotate_at_end: 1
  get_lowest_cost: 0 #correct targets to follow lowest cost route NOT TESTED
  #Params
  #Features
  use_timed_adj_disable: 0 # or block only for while turning
  use_twist_before: 3 #targets
  cost_coeff_enable: 1
  path_coeff_enable:  1
  #Turn
  pause_before_turn: 0.2 #seconds
  turn_threshhold: 0.06
  cells_per_radian: 10 #in how many cells should robot turn by one radian (max turn speed, works with dynamic turn)
  turn_coeff: 0.9 #More = faster
  min_turn_coeff: 0.4 #final!
  
  # Circles on which planer tries to find lowest cost position
  num_of_circles: 2
  circles_dist: 1 #in cells
  circles_step_radians_resolution: 8 #number of points on each circle
  footprint_calc_step_radians_resolution: 20 #how many points on circle for calculating cost
  #### Params for footprint cost calc
   
