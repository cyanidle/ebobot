global_planer: #almost everything is in cells, which depends on costmap resolution
  maximum_cost: 12 #Most important
  maximum_jumps: 1000
  # Features
  cleanup_feature: 1
  resend: 1
  stuck_check_feature: 1
  experimental_cleanup_enable: 1
  #
  recovery_cost_step: 5 #if stuck in beginnig increases allowed cost
  twist_amplify_coeff: 0.5
  consecutive_jumps_threshhold: 2 #Leave a target each 'n' straight hops
  update_stop_thresh: 8 # Dist from target, when stops updating route
  step: 2
  step_radians_resolution: 20
  dist_to_target_threshhold: 3
  update_rate: 0.6
  #!!! DANGEROUS
  accelerate_coeff: 0.00015
  #!!!
  dead_end_dist_diff_threshhold: 3 #if planer backtracks this number of cells, 
  #the last point is removed (considered a dead end)
                                  
  ##### dir locking
  stuck_check_jumps: 4 #checks for 'stuck' per 'n' jumps
  stuck_dist_threshhold: 5 #dist which should be reached in (stuck_check_jumps)
  lock_dirs: #directions which get tried one after another if planer is stuck
    - 0
    - left
    - left
    - right
    - right
    - top
    - bot
#### Cleanup
  cleanup_power: 1         # number of cleanups, ussualy one is enough
  #################################
  cleanup_repeats_len: 8          # These two are important. Enabled by experimental cleanup.
  cleanup_repeats_threshhold: 7.5 # If planer hasnt moved in (cl_repeats_len) jumps from each
  ################################# point by (cl_rep_threshhold) cells -> All intermediate removed
  move_server:
    fail_times: 1
##################################
local_planer:
  twist_amplify_coeff: 0.7 #depends on resolution, allows to skip points behind
  inertia_compensation_coeff: 0.05 #allows for shrap turns (in theory)
  # Important
  cost_threshhold: 10000 #100 are walls, then there is inflation
  safe_footprint_radius: 0.20
  update_rate: 20 # in Hz
  rotate_at_end: 1
  get_lowest_cost: 0 #correct targets to follow lowest cost route
  #Params
  #Features
  cost_coeff_enable: 0
  path_coeff_enable:  1
  #
  pause_before_turn: 0.2 #seconds
  turn_threshhold: 0.05 
  cells_per_radian: 5
  turn_coeff: 0.35
  min_turn_coeff: 0.28 #final!
  #speed coeffs
  static_coeff:  0.4
  min_path_coeff: 0.2 #Final!!
  path_speed_coeff: 1 #В тугриках. Robot slows down at start and finish of the route
  cost_speed_coeff: 0.0002
  threshhold: 2 #in cells
  # Circles on which planer tries to find lowest cost position
  num_of_circles: 2
  circles_dist: 1 #in cells
  circles_step_radians_resolution: 6 #number of points on each circle
  #### Params for footprint cost calc
   